ip 주소 수정해야 하는 부분

-main.dart

-appbar\search.dart
-appbar\SearchWidget

-카테고리 부분들

-product\code.dart
        ocr_result.dart

-login 부분들

-mypage / 비밀번호 변경 / 상품추가 / 문의하기 / 자유게시판 /필터링 /탈퇴하기

-main_category 폴더 부분
-현재 러면  음료 , 스낵 완료

-바텀바 부분

-NoUser 폴더 부분



//04월 03일 -> ocr_result부분 코드 수정
               loginDB 파이썬 부분 , 마이페이지 필터링부분
//04월 06일 -> login_login.dart , mypage_filtering_allergies.dart , loginDB.py 수정 (필터링 부분 디비에 저장 성공!!)

//04월 13일 -> 바텀바 부분 , product/ocr_result.dart (로그인한 사용자 정보 가져오기)
//04월 17일 -> product/code.dart (디비에 저장된 정보가 없을 시 텍스트 추가)
//04월 18일 -> mypage/mypage_filtering_allergies (이미지 서버에 올릴 때 진행바...) (프로세스바.txt 참고하기)
//04월 24일 -> loginDB.py 로그인유저 부분 수정 , product/ocr_result (loginuser부분 수정)
               login_login.dart(자동 로그인 기능 추가) 
앞으로 ocr하는 부분이 있으면 loginuser 부분 다수정해야 함

//04월 25일 -> product/ocr_result (하이라이팅 효과 성공!!) , main.dart(바텀바 합치기)
//04월 30일 -> appbar/menu.dart 임시로 로그아웃 버튼 추가
//05월 01일 -> main.dart 상품 이미지 확대 추가
//05월 02일 -> 비회원 부분 추가 (NoUser 폴더)
//05월 03일 -> main.dart + NoUserMain.dart 텍스트 확대 추가
//05월 04일 -> 하이라이팅 부분 오류 해결!!
//05월 05일 -> 마이페이지 디자인 수정
//05월 07일 -> 커뮤니티 페이지 수정
//05월 08일 -> 글작성 페이지 수정 , 비회원 메인 페이지 , 로그인전 - 로그인 부분 수정
//05월 14일 -> 회원가입 페이지 수종  + 조장님 메인 페이지 통합
//05월 16일 -> 상품 디테일 페이지 구현(프로덕트 디테일dart)
//05월 17일 -> 조장님 카테고리 부분
//05월 21일 -> 서버부분 통합 + 상품 부분 경고메시지 추가
//05월 24일 -> 임시로 좋아요 누른 부분들 보여주는 부분 구현
//05월 26일 -> pd_choice(좋아요 누른상태) 추가 + 알레르기 화면(저장된 값 보여주는 걸로 추가)
//05월 27일 -> 인트로 메인 -> doenv 추가
//05월 28일 -> 아이디 찾기(login_id_find) 수정 , 카테고리들 수정 , 상품 디테일 부분 수정
//05월 29일 -> 메인페이지 수정 + 마이페이지 / 아이디,비번찾기 디자인 수정
//05월 31일 -> ocr 부분 수정 (ocr.py, loginDB.py)
//06월 06일 -> 조장님이 말씀하신 곳 수정 (폰트 + 메인페이지 전용 필터링 페이지 + 카테고리)
//06월 07일 -> 조장님 22
//06월 08일 -> ocr 결과 부분 버튼 수정
//06월 11일 -> 마이페이지 펠터링 , 메인 필터링 , 임시찜 , pd 초이스, 노유저 필터링 , 회원가입 , 메인페이지 , 비밀번호변경
//06월 12일 -> code(뒤로가기 버튼) + 카메라 수정
//06월 13일 -> 조장님꺼 보고 서버 연동 + 카테고리 제거
//06월 17일 -> (메인 , 노회원 바텀바 갤러리 부분 고민...)


//06월 26일 -> 찜기능 구현해보기
//06월 27일 -> 찜한 상품들 보기 + 삭제 완료 (메인 페이지 어떻게 할지 고민...) + (찜 보는 UI 물어보기)
//07월 02일 -> 메인 페이지 수정 (좋아요 누른 상품들 제외하고 보여주기)
//07월 03일 -> 필터링 화면 , 메인 (유저 , 노유저 ) , 찜화면
//07월 04일 -> 필터링에 검색 추가
//07월 10일 -> 마이페이지 , 카테고리부분 색상 변경
//07월 15일 -> 프로덕트 디테일 , 프로덕트 초이스 , 에드프로덕트 디자인 살짝 수정
//07월 17일 -> (카테고리 제외) 배경색 흰색 지정 + product/like_product , pd_choice , product_detail 부분 하트 기능 안되있던 거 구현
            + 아이콘 하나 삭제

//테스트
py
# 찜 추가하기
@app.route('/logindb/like', methods=['POST'])
@jwt_required()
def toggle_like():
    current_username = get_jwt_identity()  # 현재 로그인한 사용자의 username 가져오기
    data = request.json
    product_id = data.get('product_id')

    if not product_id:
        return jsonify({'message': '상품 ID가 필요합니다.'}), 400

    user = User.query.filter_by(username=current_username).first()
    if not user:
        return jsonify({'message': '사용자를 찾을 수 없습니다.'}), 404

    # 사용자의 좋아요 목록 가져오기 (JSON 형태의 문자열로 저장된 필드)
    liked_products = set(json.loads(user.liked_products or '[]'))

    if product_id in liked_products:
        liked_products.remove(product_id)
    else:
        liked_products.add(product_id)

    # 좋아요 목록을 다시 JSON 형태의 문자열로 저장하여 업데이트
    user.liked_products = json.dumps(list(liked_products))

    try:
        db.session.commit()
        return jsonify({'message': '좋아요 상태가 업데이트되었습니다.'}), 200
    except Exception as e:
        db.session.rollback()
        print("좋아요 상태 업데이트 실패:", str(e))
        return jsonify({'message': '좋아요 상태 업데이트 실패 ㅠ.ㅠ'}), 500


#찜 누른 상품들 
@app.route('/logindb/getlike', methods=['GET'])
@jwt_required()
def get_liked_products():
    current_username = get_jwt_identity()
    user = User.query.filter_by(username=current_username).first()
    if not user:
        return jsonify({'message': '사용자를 찾을 수 없습니다.'}), 404

    liked_product_ids = json.loads(user.liked_products or '[]')

    liked_products = Product.query.filter(Product.id.in_(liked_product_ids)).all()

    liked_products_list = [
        {
            'id': product.id,
            'name': product.name,
            'frontproduct': product.frontproduct,
            'allergens': product.allergens
        } for product in liked_products
    ]

    return jsonify({'liked_products': liked_products_list}), 200

    # user 테이블 정의
class User(db.Model):
    __tablename__ = 'user'
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(20), unique=True, nullable=False)
    password = db.Column(db.String(128), nullable=False)
    name = db.Column(db.String(20), nullable=True)
    date = db.Column(db.String(80), nullable=True)
    gender = db.Column(db.String(20), nullable=False)
    allergies = db.Column(db.String(128), nullable=True)
    liked_products = db.Column(db.String(5012), nullable=True)

    def __repr__(self):
        return f'<User {self.username}>'


#좋아요 누른 상품들 제외하고 보여주기!!
@app.route('/logindb/show_product', methods=['GET'])
@jwt_required()
def get_product():
    current_username = get_jwt_identity()  # 현재 로그인한 사용자의 username 가져오기
    user = User.query.filter_by(username=current_username).first()  # 로그인한 사용자에서 찜한 상품들 가져오기
    
    if not user:
        return jsonify({'message': 'User not found'}), 404

    # 사용자가 좋아요한 상품 ID 리스트
    liked_product_ids = json.loads(user.liked_products or '[]')
    print(liked_product_ids)
    # 좋아요한 상품들 가져오기
    liked_products = Product.query.filter(Product.id.in_(liked_product_ids)).all()

    # 모든 제품 정보를 가져오기
    all_products = Product.query.all()
    
    # 좋아요하지 않은 상품 정보만 필터링하여 반환
    filtered_products = []
    for product in all_products:
        if product not in liked_products:
            product_data = {
                'id': product.id,
                'barcode': product.barcode,
                'name': product.name,
                'kategorie': product.kategorie,
                'frontproduct': product.frontproduct,
                'backproduct': product.backproduct,
                'allergens': product.allergens
            }
            filtered_products.append(product_data)
    
    shuffle(filtered_products)  # 랜덤으로 보여줌
    return jsonify(filtered_products), 200